// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  role Role @default(USER)
  combo Combo[]
  cart Cart?
  deliveryInfo DeliveryInfo[]
  order Order[]
}

model Product {
  id String @id @default(uuid())
  name String
  description String
  price Int
  imageUrl String
  stock Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  comboItem ComboItem[]
  cartItem CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())
  name String @unique
  products Product[]
}

model Combo {
  id String @id @default(uuid())
  name String
  user User? @relation(fields: [userId], references: [id])
  userId String?
  comboItem ComboItem[]
  cartItem CartItem[]
  orderItem OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ComboItem{
  id String @id @default(uuid())
  combo Combo @relation(fields: [comboId], references: [id], onDelete: Cascade)
  comboId String
  product Product @relation(fields: [productId], references: [id])
  productId String
  @@unique([comboId, productId])
}

model Cart{
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  cartItem CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem{
  id String @id @default(uuid())
  combo Combo? @relation(fields: [comboId], references: [id])
  comboId String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String? 
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String
  quantity Int @default(1)

  @@unique([cartId, comboId])
  @@unique([cartId, productId])
}

model DeliveryInfo{
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  name String
  contact String
  addressLine String
  city String
  state String
  postalCode String
  country String
  order Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order{
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  delivery DeliveryInfo @relation(fields: [deliveryId], references: [id])
  deliveryId String
  status OrderStatus @default(PENDING)
  totalPrice Int
  orderItem OrderItem[]
  comboSnapshot Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OrderItem{
  id String @id @default(uuid())
  order Order @relation(fields: [orderId], references: [id])
  orderId String
  combo Combo @relation(fields: [comboId], references: [id])
  comboId String
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
